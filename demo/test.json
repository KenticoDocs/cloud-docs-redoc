{
  "info": {
    "description": "# Introduction\n\n\nThe Delivery API is a read-only REST API that serves published content from your Kentico Cloud projects.\n\nUse the API to deliver large amounts of content to your website or app. The content is cached on the CDN level, which makes it quickly available from wherever you are. The Delivery API provides [content filtering](https://docs.kontent.ai/link-to/filtering_content) options that allow you to retrieve only the parts of the content you need.\n\nAll requests to the API must be made securely with HTTPS with [TLS 1.2](https://github.com/Kentico/delivery-sdk-net/wiki/Fixing-error:-Could-not-create-SSL-TLS-secure-channel).\n\n<!--Callout type=Note-->\n\n<p><strong>API requests limits</strong></p>\n<p>Requests made to the Delivery API count towards the overall API Calls limit set in our <a href=\"https://kenticocloud.com/pricing/fup\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Fair Use Policy</a>.</p>\n<p>This does NOT apply to Delivery Preview API calls to preview unpublished content.</p>\n\n<!--Callout-end-->\n\n# Production vs. Preview\n\n\nYou can work with the Delivery API in two ways â€“ either retrieve published versions of content items or preview their yet unpublished versions. In both cases, you use the same methods to request data but with a different base URL.\n\nRetrieve **published** content items from your project using the **production** URL:\\\n`https://deliver.kenticocloud.com/<YOUR_PROJECT_ID>/items`\n\n**Note**: To protect your published content, use the Delivery API with [secure access](https://docs.kontent.ai/link-to/secure_access) enabled.\n\nPreview **unpublished** content items from your project using the **preview** URL:\\\n`https://preview-deliver.kenticocloud.com/<YOUR_PROJECT_ID>/items`\n\nIf you want to preview unpublished content in your project, you need to authorize your request.\n\n<!--CodeSamples-->\n\n<!--CodeSample programmingLanguage=cURL platform=REST-->\n\n\n```\ncurl --request GET \\\n  --url https://preview-deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items/on_roasts \\\n  --header 'authorization: Bearer <YOUR_PREVIEW_API_KEY>'\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=JavaScript platform=JavaScript-->\n\n\n```javascript\n// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nclass Article extends KontentDelivery.ContentItem {\n    constructor() {\n        super();\n    }\n}\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',\n    previewApiKey: '<YOUR_PREVIEW_API_KEY>',\n    globalQueryConfig:  {\n        usePreviewMode: true, // Queries the Delivery Preview API.\n    },\n    typeResolvers: [\n        new KontentDelivery.TypeResolver('article', (rawData) => new Article)\n    ]\n});\n\ndeliveryClient.item('on_roasts')\n    .toObservable()\n    .subscribe(response => console.log(response));\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=TypeScript platform=TypeScript-->\n\n\n```typescript\n// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { ContentItem, DeliveryClient, Elements, TypeResolver } from '@kentico/kontent-delivery';\n\n// Create strongly typed models according to https://docs.kenticocloud.com/tutorials/develop-apps/get-content/using-strongly-typed-models\nexport class Article extends ContentItem {\n    public title: Elements.TextElement;\n    public summary: Elements.TextElement;\n    public post_date: Elements.DateTimeElement;\n    public teaser_image: Elements.AssetsElement;\n    public related_articles: Article[];\n}\n\nconst deliveryClient = new DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',\n    previewApiKey: '<YOUR_PREVIEW_API_KEY>',\n    globalQueryConfig:  {\n        usePreviewMode: true, // Queries the Delivery Preview API.\n    },\n    typeResolvers: [\n        new TypeResolver('article', (rawData) => new Article)\n    ]\n});\n\ndeliveryClient.item<Article>('on_roasts')\n    .toObservable()\n    .subscribe(response => console.log(response));\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=C# platform=.NET-->\n\n\n```csharp\n// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a delivery client for previewing content\nIDeliveryClient client = DeliveryClientBuilder\n    .WithOptions(builder => builder\n        .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n        .UsePreviewApi(\"<YOUR_PREVIEW_API_KEY>\")\n        .Build())\n    .Build();\n\n// Generate strongly typed models via https://github.com/Kentico/cloud-generators-net\nDeliveryItemResponse<object> response = await client.GetItemAsync<object>(\"on_roasts\");\n\nvar items = response.Items;\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=Java platform=Java-->\n\n\n```java\n// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\", \"<YOUR_PREVIEW_API_KEY>\");\n\nContentItem item = client.getItem(\"on_roasts\").item;\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=Java platform=Android-->\n\n\n```java\n// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares an array to hold strongly-typed models\nList<TypeResolver<?>> typeResolvers = new ArrayList<>();\n\n// Registers the type resolver for articles\ntypeResolvers.add(new TypeResolver<>(Article.TYPE, new Function<Void, Article>() {\n    @Override\n    public Article apply(Void input) {\n        return new Article();\n    }\n}));\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nString previewApiKey = \"<YOUR_PREVIEW_API_KEY>\";\n\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId)\n    .withTypeResolvers(typeResolvers)\n    .withPreviewApiKey(previewApiKey);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets the latest version of an article using a simple request\nArticle article = deliveryService.<Article>item(\"on_roasts\")\n    .get()\n    .getItem();\n\n// Gets the latest version of an article using RxJava2\ndeliveryService.<Article>item(\"on_roasts\")\n    .getObservable()\n    .subscribe(new Observer<DeliveryItemResponse<Article>>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryItemResponse<Article> response) {\n            // Get the article\n            Article item = response.getItem();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=Swift platform=iOS-->\n\n\n```swift\n// Tip: Find more about Swift SDK at https://docs.kontent.ai/ios\nimport KenticoCloud\n\nlet client = DeliveryClient.init(projectId: \"975bf280-fd91-488c-994c-2f04416e5ee3\", apiKey: \"<YOUR_PREVIEW_API_KEY>\")\n\n// More about strongly-typed models https://github.com/Kentico/cloud-sdk-swift#using-strongly-typed-models\nclient.getItem(modelType: Article.self, itemName: \"on_roasts\") { (isSuccess, itemResponse, error) in\n    if isSuccess {\n        if let article = itemResponse.item {\n            // Use your item here\n        }\n    } else {\n        if let error = error {\n            print(error)\n        }\n    }\n}\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=PHP platform=PHP-->\n\n\n```php\n<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3', '<YOUR_PREVIEW_API_KEY>');\n\n$item = $client->getItem('on_roasts');\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSample programmingLanguage=Ruby platform=Ruby-->\n\n\n```ruby\nrequire 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3',\n                    preview_key: '<YOUR_PREVIEW_API_KEY>'\ndelivery_client.item('on_roasts').execute do |response|\n  puts response.to_s\nend\n```\n\n<!--CodeSample-end-->\n\n<!--CodeSamples-end-->\n\nFor the Delivery Preview API, you can use two concurrent API keys, Primary and Secondary. For more details on how to work with the keys, see [Previewing unpublished content](https://docs.kontent.ai/link-to/previewing_unpublished_content).\n\n# Authentication\n\n\nBy default, the Delivery API does not require authentication. However, if you enable [secure access](https://docs.kontent.ai/link-to/secure_access) for the Delivery API or use the Delivery Preview API, you need to authenticate your requests with valid API keys.\n\nTo work with the Delivery API with secure access enabled or the Delivery Preview API, send your requests over HTTPS and authenticate with an OAuth 2.0 [bearer token](https://tools.ietf.org/html/rfc6750) using the Authorization header.\n\n<!--CodeSample programmingLanguage=HTTP platform=-->\n\n\n```http\nAuthorization: Bearer <YOUR_API_KEY>\n```\n\n<!--CodeSample-end-->\n\nTo get your API keys for the APIs, go to [Kentico Kontent](https://app.kontent.ai/) -> Project settings -> API keys. An API key provides access to a single Kentico Cloud project. You will need a different API key for each of your projects.\n\nCalls with an incorrect or missing Authorization header will fail with an error.\n\n# Errors\n\n\nKentico Kontent returns standard HTTP status codes to indicate success or failure of a request. In general, codes in the `2xx` range indicate a successful request, codes in the `4xx` range indicate errors caused by an incorrect input (for example, providing incorrect API key), and codes in the `5xx` range indicate an error on our side.\n\n## Error codes summary\n\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>\n\n**Status code**\n\n</td>\n\n<td>\n\n**Description**\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>\n\n<code>400</code> **Bad Request**\n\n</td>\n\n<td>The request was not understood. Check your request for a missing required parameter or an invalid query parameter value.</td>\n\n</tr>\n\n<tr>\n\n<td>\n\n<code>401</code> **Unauthorized**\n\n</td>\n\n<td>The provided API key is invalid or missing.</td>\n\n</tr>\n\n<tr>\n\n<td>\n\n<code>403</code> **Forbidden**\n\n</td>\n\n<td>The provided API key is invalid for the requested project.</td>\n\n</tr>\n\n<tr>\n\n<td>\n\n<code>404</code> **Not Found**\n\n</td>\n\n<td>The requested resource doesn't exist. Try checking the resource name for typos.</td>\n\n</tr>\n\n<tr>\n\n<td>\n\n<code>405</code> **Method Not Allowed**\n\n</td>\n\n<td>The requested HTTP method is not supported for the specified resource. Try performing a GET request.</td>\n\n</tr>\n\n<tr>\n\n<td>\n\n<code>500</code> **Internal Server Error**\n\n</td>\n\n<td>Something went wrong on our side. Try the request again in a few minutes, or contact us.</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\n## Resolving errors\n\n\nFor troubleshooting failed requests, the API provides error messages defined in a consumable format to help you identify and fix the issue.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Error\" showReadOnly={true} showWriteOnly={true} /> \n\nIf you cannot identify and resolve an issue with your API call, you can contact us with the response status and the unique error ID.\n",
    "title": "Delivery API",
    "version": "1"
  },
  "openapi": "3.0.2",
  "x-api-status": "beta",
  "paths": {
    "/{project_id}/items": {
      "get": {
        "description": "Retrieve a list of content items in your project. By default, the API returns an unfiltered paginated list of content items that is ordered alphabetically by codename.\n\nIf you need to export all content items from your project, we recommend using the [Enumerate content item](https://docs.kontent.ai/link-to/enumerate_content_items) endpoint.\n\nYou can change the order by specifying the `order` query parameter. You can customize pagination by using the `skip` and `limit` query parameters.\n\n<!--Callout type=Tip-->\n\n<p><strong>Filtering content items</strong></p>\n<p>Using the filtering parameters and operators, you can retrieve only a specific set of content items, such as items tagged with a specific term, items of a specific type, items modified in the last three days. Learn more about the parameters and operators in <a data-item-id=\"b6cf1d73-471a-4f1e-b0a9-f0e041e2d905\" href=\"https://docs.kontent.ai/link-to/filtering_content\">filtering content</a>.</p>\n\n<!--Callout-end-->\n",
        "operationId": "list-content-items",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/language"
        }, {
          "$ref": "#/components/parameters/elements"
        }, {
          "$ref": "#/components/parameters/order"
        }, {
          "$ref": "#/components/parameters/depth"
        }, {
          "$ref": "#/components/parameters/skip"
        }, {
          "$ref": "#/components/parameters/limit_8cd54e2"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "List content items",
        "tags": ["Content items"],
        "responses": {
          "200": {
            "description": "A paginated list of content items matching the specified criteria.\n",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["items", "modular_content", "pagination"],
                  "properties": {
                    "items": {
                      "description": "A list of content items.\n",
                      "items": {
                        "$ref": "#/components/schemas/ContentItem"
                      },
                      "uniqueItems": true,
                      "type": "array"
                    },
                    "modular_content": {
                      "description": "A dictionary of [components and linked items](https://docs.kontent.ai/link-to/linked_content_and_components).\n",
                      "additionalProperties": {
                        "0": "#",
                        "x-additionalPropertiesName": "<ItemOrComponentCodename>"
                      },
                      "type": "object"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "items": [{
                    "system": {
                      "id": "3120ec15-a4a2-47ec-8ccd-c85ac8ac5ba5",
                      "name": "Which brewing fits you?",
                      "codename": "which_brewing_fits_you_",
                      "language": "en-US",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-03-27T13:24:54.042Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "Which brewing fits you?"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "We have put down three procedures with clearly written steps describing the process of making coffee. Read this article to convince yourself that brewing coffee is no science"
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-10-27T00:00:00Z"
                      }
                    }
                  }, {
                    "system": {
                      "id": "117cdfae-52cf-4885-b271-66aef6825612",
                      "name": "Coffee processing techniques",
                      "codename": "coffee_processing_techniques",
                      "language": "en-US",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-03-27T13:13:35.312Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "Coffee processing techniques"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "Learn about the techniques of processing the products of coffee plants. Different methods are used in different parts of the world depending mainly on their weather conditions."
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-11-02T00:00:00Z"
                      }
                    }
                  }, {
                    "system": {
                      "id": "f4b3fc05-e988-4dae-9ac1-a94aba566474",
                      "name": "On Roasts",
                      "codename": "on_roasts",
                      "language": "en-US",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-03-27T13:21:11.38Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "On Roasts"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "Roasting coffee beans can take from 6 to 13 minutes. Different roasting times produce different types of coffee, with varying concentration of caffeine and intensity of the original flavor."
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-11-07T00:00:00Z"
                      }
                    }
                  }, {
                    "system": {
                      "id": "b2fea94c-73fd-42ec-a22f-f409878de187",
                      "name": "Origins of Arabica Bourbon",
                      "codename": "origins_of_arabica_bourbon",
                      "language": "en-US",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-03-27T13:21:49.151Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "Origins of Arabica Bourbon"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "This one particular type of coffee, the Arabica Bourbon, is now sold only in Japan. It has been brought back to life by enthusiasts after being almost forgotten for nearly sixty years."
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-11-11T00:00:00Z"
                      }
                    }
                  }, {
                    "system": {
                      "id": "23f71096-fa89-4f59-a3f9-970e970944ec",
                      "name": "Donate with us",
                      "codename": "donate_with_us",
                      "language": "en-US",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-03-27T13:14:07.384Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "Donate with us"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "Dancing Goat regularly donates money to Children in Africa, a foundation helping children with food, accommodation, education, and other essentials. Donate with us and create a better world."
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-11-12T00:00:00Z"
                      }
                    }
                  }, {
                    "system": {
                      "id": "cf106f4e-30a4-42ef-b313-b8ea3fd3e5c5",
                      "name": "Coffee Beverages Explained",
                      "codename": "coffee_beverages_explained",
                      "language": "en-US",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-03-27T13:12:58.578Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "Coffee Beverages Explained"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "Espresso and filtered coffee are the two main categories of coffee, based on the method of preparation. Learn about individual types of coffee that fall under these categories."
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-11-18T00:00:00Z"
                      }
                    }
                  }],
                  "modular_content": {},
                  "pagination": {
                    "skip": 0,
                    "limit": 0,
                    "count": 6,
                    "next_page": ""
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items?system.type=article&elements=title%2Csummary%2Cpost_date&order=elements.post_date' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nclass Article extends KontentDelivery.ContentItem {\n    constructor() {\n        super();\n    }\n}\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',\n    typeResolvers: [\n        new KontentDelivery.TypeResolver('article', (rawData) => new Article())\n    ]\n});\n\ndeliveryClient.items()\n    .type('article')\n    .elementsParameter(['title', 'summary', 'post_date'])\n    .orderParameter('elements.post_date', KontentDelivery.SortOrder.desc)\n    .toObservable()\n    .subscribe(response => console.log(response));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { ContentItem, DeliveryClient, Elements, SortOrder, TypeResolver } from '@kentico/kontent-delivery';\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nexport class Article extends ContentItem {\n    public title: Elements.TextElement;\n    public summary: Elements.TextElement;\n    public post_date: Elements.DateTimeElement;\n    public teaser_image: Elements.AssetsElement;\n    public related_articles: Article[];\n}\n\nconst deliveryClient = new DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',\n    typeResolvers: [\n        new TypeResolver('article', (rawData) => new Article)\n    ]\n});\n\ndeliveryClient.items<Article>()\n    .type('article')\n    .elementsParameter(['title', 'summary', 'post_date'])\n    .orderParameter('elements.post_date', SortOrder.desc)\n    .toObservable()\n    .subscribe(response => console.log(response));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets specific elements of 3 articles ordered by the \"Post date\" element\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nDeliveryItemListingResponse<Article> response = await client.GetItemsAsync<Article>(\n    new EqualsFilter(\"system.type\", \"article\"),\n    new ElementsParameter(\"title\", \"summary\", \"post_date\"),\n    new OrderParameter(\"elements.post_date\", SortOrder.Descending)\n    );\n\nvar items = response.Items;"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nList<NameValuePair> params = DeliveryParameterBuilder.params()\n    .filterEquals(\"system.type\", \"article\")\n    .projection(\"title\", \"summary\", \"post_date\")\n    .orderByDesc(\"elements.post_date\")\n    .build();\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nList<ArticleItem> items = client.getItems(ArticleItem.class, params);"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares an array to hold strongly-typed models\nList<TypeResolver<?>> typeResolvers = new ArrayList<>();\n\n// Registers the type resolver for articles\ntypeResolvers.add(new TypeResolver<>(Article.TYPE, new Function<Void, Article>() {\n    @Override\n    public Article apply(Void input) {\n        return new Article();\n    }\n}));\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId)\n    .withTypeResolvers(typeResolvers);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets specific elements of 3 articles ordered by the \"Post date\" element using a simple request\nList<Article> articles = deliveryService.<Article>items()\n    .equalsFilter(\"system.type\", \"article\")\n    .elementsParameter(Arrays.asList(\"title\", \"summary\", \"post_date\"))\n    .orderParameter(\"elements.post_date\", OrderType.Desc)\n    .get()\n    .getItems();\n\n// Gets specific elements of 3 articles ordered by the \"Post date\" element using RxJava2\ndeliveryService.<Article>items()\n    .equalsFilter(\"system.type\", \"article\")\n    .elementsParameter(Arrays.asList(\"title\", \"summary\", \"post_date\"))\n    .orderParameter(\"elements.post_date\", OrderType.Desc)\n    .getObservable()\n    .subscribe(new Observer<DeliveryItemListingResponse<Article>>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryItemListingResponse<Article> response) {\n            // Gets the mapped articles\n            List<Article> articles = response.getItems();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "Swift",
          "source": "// Tip: Find more about Swift SDK at https://docs.kontent.ai/ios\nimport KenticoCloud\n \nlet client = DeliveryClient.init(projectId:\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n \nlet customQuery = \"items?system.type=article&elements=title,summary,post_date&order=elements.post_date[desc]\"\nclient.getItems(modelType: Article.self, customQuery: customQuery) { (isSuccess, itemsResponse, error) in\n      if isSuccess {\n           if let articles = itemsResponse?.items {\n               // Use your items here\n           }\n       } else {\n           if let error = error {\n               print(error)\n           }\n       }"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\nuse Kentico\\Kontent\\Delivery\\QueryParams;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$items = $client->getItems((new QueryParams())\n            ->equals('system.type', 'article')\n            ->elements(array('title', 'summary', 'post_date'))\n            ->orderDesc('elements.post_date'));"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.items('system.type'.eq('article'))\n               .order_by('elements.post_date', '[desc]')\n               .elements(%w[title summary post_date])\n               .execute do |response|\n                 items = response.items\n               end"
        }]
      }
    },
    "/{project_id}/item/{item_codename}": {
      "get": {
        "description": "Retrieve a specific content item by specifying its codename.\n\n**Note**: Any change to a content item name affects the codename. To retrieve an updated content item, adjust its codename in the API request.\n",
        "operationId": "retrieve-a-content-item",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/item_codename"
        }, {
          "$ref": "#/components/parameters/language"
        }, {
          "$ref": "#/components/parameters/elements"
        }, {
          "$ref": "#/components/parameters/depth"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "Retrieve a content item",
        "tags": ["Content items"],
        "responses": {
          "200": {
            "description": "A single content item object.\n",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["item", "modular_content"],
                  "properties": {
                    "item": {
                      "$ref": "#/components/schemas/ContentItem"
                    },
                    "modular_content": {
                      "description": "The collection of related Content item objects (including component objects).\n",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/ContentItem"
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "item": {
                    "system": {
                      "id": "f4b3fc05-e988-4dae-9ac1-a94aba566474",
                      "name": "On Roasts",
                      "codename": "on_roasts",
                      "language": "default",
                      "type": "article",
                      "sitemap_locations": ["articles"],
                      "last_modified": "2016-10-20T12:03:48.4628352Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "On Roasts"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary",
                        "value": "Roasting coffee beans can take from 6 to 13 minutes. Different roasting times produce different types of coffee, with varying concentration of caffeine and intensity of the original flavor."
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date",
                        "value": "2014-11-07T00:00:00Z"
                      },
                      "teaser_image": {
                        "type": "asset",
                        "name": "Teaser image",
                        "value": [{
                          "name": "on-roasts-1080px.jpg",
                          "type": "image/jpeg",
                          "size": 0,
                          "description": null,
                          "url": "https://assets-us-01.kc-usercontent.com/5859c8b2-f64d-405f-a306-d65dd5b1da04/f6daed1f-3f3b-4036-a9c7-9519359b9601/on-roasts-1080px.jpg"
                        }]
                      },
                      "related_articles": {
                        "type": "modular_content",
                        "name": "Related articles",
                        "value": ["coffee_processing_techniques", "origins_of_arabica_bourbon"]
                      }
                    }
                  },
                  "modular_content": {}
                }
              }
            }
          },
          "404": {
            "description": "The specified content item is not published or was deleted.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "The requested content item 'on_roasts' was not found.",
                  "request_id": "|657e8eba55d8bf4a9a5ad9074038cd2e.813e828d_",
                  "error_code": 100,
                  "specific_code": 0
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items/on_roasts?elements=title%2Csummary%2Cpost_date%2Cteaser_image%2Crelated_articles' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nclass Article extends KontentDelivery.ContentItem {\n    constructor() {\n        super();\n    }\n}\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',\n    typeResolvers: [\n        new KontentDelivery.TypeResolver('article', (rawData) => new Article())\n    ]\n});\n\ndeliveryClient.item('on_roasts')\n    .elementsParameter(['title', 'summary', 'post_date', 'teaser_image', 'related_articles'])\n    .toObservable()\n    .subscribe(response => console.log(response.item));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { ContentItem, DeliveryClient, Elements, TypeResolver } from '@kentico/kontent-delivery';\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nexport class Article extends ContentItem {\n    public title: Elements.TextElement;\n    public summary: Elements.TextElement;\n    public post_date: Elements.DateTimeElement;\n    public teaser_image: Elements.AssetsElement;\n    public related_articles: Article[];\n}\n\nconst deliveryClient = new DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',\n    typeResolvers: [\n      new TypeResolver('article', (rawData) => new Article)\n    ]\n});\n\ndeliveryClient.item<Article>('on_roasts')\n    .elementsParameter(['title', 'summary', 'post_date', 'teaser_image', 'related_articles'])\n    .toObservable()\n    .subscribe(response => console.log(response.item));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets specific elements of an article\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nDeliveryItemResponse<Article> response = await client.GetItemAsync<Article>(\"on_roasts\",\n    new ElementsParameter(\"title\", \"summary\", \"post_date\", \"teaser_image\", \"related_articles\")\n    );\n\nArticle item = response.Item;"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nList<NameValuePair> params = DeliveryParameterBuilder.params().projection(\"title\", \"summary\", \"post_date\", \"teaser_image\", \"related_articles\").build();\n\n// Create strongly typed models according to https://docs.kontent.ai/strongly-typed-models\nArticleItem item = client.getItem(\"on_roasts\", ArticleItem.class, params);"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares an array to hold strongly-typed models\nList<TypeResolver<?>> typeResolvers = new ArrayList<>();\n\n// Registers the type resolver for articles\ntypeResolvers.add(new TypeResolver<>(Article.TYPE, new Function<Void, Article>() {\n    @Override\n    public Article apply(Void input) {\n        return new Article();\n    }\n}));\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId)\n  .withTypeResolvers(typeResolvers);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets specific elements of an article using a simple request\nArticle article = deliveryService.<Article>item(\"on_roasts\")\n    .elementsParameter(Arrays.asList(\"title\", \"summary\", \"post_date\", \"teaser_image\", \"related_articles\"))\n    .get()\n    .getItem();\n\n// Gets specific elements of an article using RxJava2\ndeliveryService.<Article>item(\"on_roasts\")\n    .elementsParameter(Arrays.asList(\"title\", \"summary\", \"post_date\", \"teaser_image\", \"related_articles\"))\n    .getObservable()\n    .subscribe(new Observer<DeliveryItemResponse<Article>>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryItemResponse<Article> response) {\n            // Gets the article\n            Article article = response.getItem();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "Swift",
          "source": "// Tip: Find more about Swift SDKs at https://docs.kontent.ai/ios\nimport KenticoCloud\n\nlet client = DeliveryClient.init(projectId: \"975bf280-fd91-488c-994c-2f04416e5ee3\")\n\nlet customQuery = \"items/on_roasts?elements=title,summary,post_date,teaser_image,related_articles\"\nclient.getItem(modelType: Article.self, customQuery: customQuery) { (isSuccess, deliveryItem, error) in\n     if isSuccess {\n        if let article = deliveryItem.item {\n            // Use your item here\n        }\n    } else {\n        if let error = error {\n            print(error)\n        }\n    }"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$item = $client->getItem('on_roasts', (new QueryParams())\n            ->elements(array('title', 'summary', 'post_date','teaser_image', 'related_articles')));"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.item('on_roasts')\n               .elements(%w[title summary post_date teaser_image related_articles])\n               .execute do |response|\n                 item = response.item\n               end"
        }]
      }
    },
    "/{project_id}/items-feed": {
      "get": {
        "description": "Retrieve a dynamically paginated list of content items in your project. The items are ordered alphabetically by codename.\n\nIf the response comes with the `X-Continuation` header, it means that there are more pages to retrieve. To get the next page of results, send the `X-Continuation` header with your request as you received it.\n\nThis endpoint, unlike the [List content items](https://docs.kontent.ai/link-to/list_content_items) endpoint, guarantees enumerating all items in the specified project. We recommend using this endpoint for warming up your app's cache (i.e., getting all content into the cache after the app starts) or for exporting content of your project.\n\n<!--Callout type=Tip-->\n\n<p><strong>Filtering content items</strong></p>\n<p>Using the filtering parameters and operators, you can retrieve only a specific set of content items, such as items tagged with a specific term, items of a specific type, items modified in the last three days. Learn more about the parameters and operators in <a data-item-id=\"b6cf1d73-471a-4f1e-b0a9-f0e041e2d905\" href=\"https://docs.kontent.ai/link-to/filtering_content\">filtering content</a>.</p>\n\n<!--Callout-end-->\n",
        "operationId": "enumerate-content-items",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/language"
        }, {
          "$ref": "#/components/parameters/elements"
        }, {
          "$ref": "#/components/parameters/order"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }, {
          "$ref": "#/components/parameters/x_continuation"
        }],
        "summary": "Enumerate content items",
        "tags": ["Content items"],
        "responses": {
          "200": {
            "description": "A dynamically paginated feed of content items and components.\n",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["items", "modular_content"],
                  "properties": {
                    "items": {
                      "description": "A list of content items\n",
                      "items": {
                        "$ref": "#/components/schemas/ContentItem"
                      },
                      "uniqueItems": true,
                      "type": "array"
                    },
                    "modular_content": {
                      "description": "A list of components used in rich text elements. See [Linked content and components](https://docs.kontent.ai/link-to/linked_content_and_components) for more details.\n",
                      "additionalProperties": {
                        "0": "#",
                        "x-additionalPropertiesName": "<ComponentCodename>"
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "items": [{
                    "system": {
                      "id": "b69ed774-8fb2-4413-8d12-d4c193a66f7a",
                      "name": "Getting content",
                      "codename": "getting_content",
                      "language": "default",
                      "type": "article",
                      "sitemap_locations": [],
                      "last_modified": "2019-09-12T07:11:43.2391249Z"
                    },
                    "elements": {
                      "title": {
                        "type": "text",
                        "name": "Title",
                        "value": "Getting content"
                      },
                      "introduction": {
                        "type": "rich_text",
                        "name": "Introduction",
                        "images": {},
                        "links": {},
                        "modular_content": [],
                        "value": "<p>While your copywriters write articles and add finishing touches to the content in your project, you can deliver that content to web and mobile applications via an API. In this tutorial, you'll learn how to retrieve your content from Kentico Kontent using the Delivery API.</p>"
                      },
                      "content": {
                        "type": "rich_text",
                        "name": "Content",
                        "images": {},
                        "links": {},
                        "modular_content": [],
                        "value": "<p>The Delivery API is a read-only REST API that can serve your content in two modes: public and preview.</p>"
                      }
                    }
                  }],
                  "modular_content": {}
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items-feed?system.type=article&elements=title%2Csummary%2Cpost_date&order=elements.post_date' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing KenticoCloud.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets feed for specific elements of articles ordered by the \"Post date\" element\n// Create strongly typed models according to https://developer.kenticocloud.com/docs/strongly-typed-models\nDeliveryItemsFeed<Article> feed = client.GetItemsFeed<Article>(\n    new EqualsFilter(\"system.type\", \"article\"),\n    new ElementsParameter(\"title\", \"summary\", \"post_date\"),\n    new OrderParameter(\"elements.post_date\", SortOrder.Descending)\n    );\n\nwhile (feed.HasMoreResults)\n{\n    DeliveryItemsFeedResponse<Article> response = await feed.FetchNextBatchAsync();\n    foreach(Article article in response) {\n        // Do something with the content item, e.g. update cache\n        ProcessContentItem(article);\n    }\n}"
        }]
      }
    },
    "/{project_id}/types/{type_codename}/elements/{element_codename}": {
      "get": {
        "description": "Retrieve a specific content element by specifying the content type it's used in and the element codename.\n",
        "operationId": "retrieve-a-content-element",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/type_codename"
        }, {
          "$ref": "#/components/parameters/element_codename"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "Retrieve a content element",
        "tags": ["Content elements"],
        "responses": {
          "200": {
            "description": "A content element object\n",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [{
                    "$ref": "#/components/schemas/UrlSlugInItem"
                  }, {
                    "$ref": "#/components/schemas/TaxonomyInItem"
                  }, {
                    "$ref": "#/components/schemas/AssetInItem"
                  }, {
                    "$ref": "#/components/schemas/MultipleChoiceInItem"
                  }, {
                    "$ref": "#/components/schemas/DateTimeInItem"
                  }, {
                    "$ref": "#/components/schemas/RichTextInItem"
                  }, {
                    "$ref": "#/components/schemas/LinkedItemsInItem"
                  }, {
                    "$ref": "#/components/schemas/NumberInItem"
                  }, {
                    "$ref": "#/components/schemas/CustomElementInItem"
                  }, {
                    "$ref": "#/components/schemas/Text"
                  }]
                },
                "example": {
                  "type": "taxonomy",
                  "name": "Processing",
                  "taxonomy_group": "processing",
                  "codename": "processing"
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/types/coffee/elements/processing' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.element('coffee', 'processing')\n    .toObservable()\n    .subscribe(response => console.log(response));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { DeliveryClient } from '@kentico/kontent-delivery';\n\nconst deliveryClient = new DeliveryClient({\n  projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.element('coffee', 'processing')\n    .toObservable()\n    .subscribe(response => console.log(response));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets the model of specific element within a specific content type\nContentElement element = await client.GetContentElementAsync(\"coffee\", \"processing\");"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nElement element = client.getContentTypeElement(\"coffee\", \"processing\");"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets the \"Processing\" content element from the \"Coffee\" type using a simple request\nContentTypeElement element = deliveryService.contenTypeElement(\"coffee\", \"processing\")\n    .get()\n    .getElement();\n\n// Gets the \"Processing\" content element from the \"Coffee\" type using RxJava2\ndeliveryService.contenTypeElement(\"coffee\", \"processing\")\n    .getObservable()\n    .subscribe(new Observer<DeliveryContentTypeElementResponse>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryContentTypeElementResponse response) {\n            // Gets the content element\n            ContentTypeElement element = response.getElement();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$element = $client->getElement('coffee', 'processing');"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.element('coffee', 'processing').execute do |response|\n  ele = response.element\nend"
        }]
      }
    },
    "/{project_id}/types": {
      "get": {
        "description": "Retrieve a paginated list of content types in your project. By default, the API returns all content types ordered alphabetically by codename. You can customize pagination by using the `skip` and `limit` query parameters.\n",
        "operationId": "list-content-types",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/elements"
        }, {
          "$ref": "#/components/parameters/skip"
        }, {
          "$ref": "#/components/parameters/limit_8cd54e2"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "List content types",
        "tags": ["Content types"],
        "responses": {
          "200": {
            "description": "A list of content types\n",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["types", "pagination"],
                  "properties": {
                    "types": {
                      "items": {
                        "$ref": "#/components/schemas/ContentType"
                      },
                      "uniqueItems": true,
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "types": [{
                    "system": {
                      "id": "b2c14f2c-6467-460b-a70b-bca17972a33a",
                      "name": "About us",
                      "codename": "about_us",
                      "last_modified": "2017-08-02T07:33:28.2997578Z"
                    },
                    "elements": {
                      "facts": {
                        "type": "modular_content",
                        "name": "Facts"
                      },
                      "url_pattern": {
                        "type": "url_slug",
                        "name": "URL pattern"
                      }
                    }
                  }, {
                    "system": {
                      "id": "d9748663-f567-4c51-a922-c24a1d6b935a",
                      "name": "Accessory",
                      "codename": "accessory",
                      "last_modified": "2017-08-02T07:33:39.3620325Z"
                    },
                    "elements": {
                      "product_name": {
                        "type": "text",
                        "name": "Product name"
                      },
                      "price": {
                        "type": "number",
                        "name": "Price"
                      },
                      "image": {
                        "type": "asset",
                        "name": "Image"
                      },
                      "manufacturer": {
                        "type": "text",
                        "name": "Manufacturer"
                      },
                      "product_status": {
                        "type": "taxonomy",
                        "name": "Product status",
                        "taxonomy_group": "product_status"
                      },
                      "short_description": {
                        "type": "rich_text",
                        "name": "Short description"
                      },
                      "long_description": {
                        "type": "rich_text",
                        "name": "Long description"
                      },
                      "url_pattern": {
                        "type": "url_slug",
                        "name": "URL pattern"
                      }
                    }
                  }, {
                    "system": {
                      "id": "b7aa4a53-d9b1-48cf-b7a6-ed0b182c4b89",
                      "name": "Article",
                      "codename": "article",
                      "last_modified": "2017-08-02T07:33:19.8599559Z"
                    },
                    "elements": {
                      "personas": {
                        "type": "taxonomy",
                        "name": "Personas",
                        "taxonomy_group": "personas"
                      },
                      "title": {
                        "type": "text",
                        "name": "Title"
                      },
                      "teaser_image": {
                        "type": "asset",
                        "name": "Teaser image"
                      },
                      "post_date": {
                        "type": "date_time",
                        "name": "Post date"
                      },
                      "summary": {
                        "type": "text",
                        "name": "Summary"
                      },
                      "body_copy": {
                        "type": "rich_text",
                        "name": "Body Copy"
                      },
                      "related_articles": {
                        "type": "modular_content",
                        "name": "Related articles"
                      },
                      "meta_keywords": {
                        "type": "text",
                        "name": "Meta keywords"
                      },
                      "meta_description": {
                        "type": "text",
                        "name": "Meta description"
                      },
                      "url_pattern": {
                        "type": "url_slug",
                        "name": "URL pattern"
                      }
                    }
                  }],
                  "pagination": {
                    "skip": 0,
                    "limit": 3,
                    "count": 3,
                    "next_page": "https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/types?limit=3&skip=3"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/types?limit=3' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.types()\n    .limitParameter(3)\n    .toObservable()\n    .subscribe(response => console.log(response.types));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { DeliveryClient } from '@kentico/kontent-delivery';\n\nconst deliveryClient = new DeliveryClient({\n  projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.types()\n  .limitParameter(3)\n  .toObservable()\n  .subscribe(response => console.log(response.types));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets 3 content types\nDeliveryTypeListingResponse response = await client.GetTypesAsync(\n    new LimitParameter(3)\n    );\n\nvar types = response.Types;"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nList<NameValuePair> params = DeliveryParameterBuilder.params().page(null, 3).build();\nContentTypesListingResponse types = client.getTypes(params);"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets 3 content types using a simple request\nList<ContentType> types = deliveryService.types()\n    .limitParameter(3)\n    .get()\n    .getTypes();\n\n// Gets 3 content types using RxJava2\ndeliveryService.types()\n    .limitParameter(3)\n    .getObservable()\n    .subscribe(new Observer<DeliveryTypeListingResponse>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryTypeListingResponse response) {\n            // Gets content types from response\n            List<ContentType> types = response.getTypes();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "Swift",
          "source": "// Tip: Find more about Swift SDK at https://docs.kontent.ai/ios\nimport KenticoCloud\n \nlet client = DeliveryClient.init(projectId: \"975bf280-fd91-488c-994c-2f04416e5ee3\")\n \nclient.getContentTypes(limit: 3, completionHandler: { (isSuccess, contentTypesResponse, error) in\n    if !isSuccess {\n        fail( \"Response is not successful. Error: \\(String(describing: error))\" )\n    }\n     \n    if let response = contentTypesResponse {\n    // use content types here\n    }\n})"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\nuse Kentico\\Kontent\\Delivery\\QueryParams;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$types = $client->getTypes((new QueryParams())\n            ->limit(3));"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.types\n               .limit(3)\n               .execute do |response|\n                 types = response.types\n               end"
        }]
      }
    },
    "/{project_id}/types/{type_codename}": {
      "get": {
        "description": "Retrieve a specific content type from your project specified by codename.\n",
        "operationId": "retrieve-a-content-type",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/type_codename"
        }, {
          "$ref": "#/components/parameters/elements"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "Retrieve a content type",
        "tags": ["Content types"],
        "responses": {
          "200": {
            "description": "A content type object.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentType"
                },
                "example": {
                  "system": {
                    "id": "b7aa4a53-d9b1-48cf-b7a6-ed0b182c4b89",
                    "name": "Article",
                    "codename": "article",
                    "last_modified": "2019-07-16T07:12:44.8360000Z"
                  },
                  "elements": {
                    "personas": {
                      "type": "taxonomy",
                      "name": "Personas",
                      "taxonomy_group": "personas"
                    },
                    "body_copy": {
                      "type": "rich_text",
                      "name": "Body Copy"
                    },
                    "post_date": {
                      "type": "date_time",
                      "name": "Post date"
                    },
                    "meta_keywords": {
                      "type": "text",
                      "name": "Meta keywords"
                    },
                    "teaser_image": {
                      "type": "asset",
                      "name": "Teaser image"
                    },
                    "metadata__twitter_image": {
                      "type": "asset",
                      "name": "twitter:image"
                    },
                    "metadata__twitter_creator": {
                      "type": "text",
                      "name": "twitter:creator"
                    },
                    "title": {
                      "type": "text",
                      "name": "Title"
                    },
                    "summary": {
                      "type": "text",
                      "name": "Summary"
                    },
                    "related_articles": {
                      "type": "modular_content",
                      "name": "Related articles"
                    },
                    "url_pattern": {
                      "type": "url_slug",
                      "name": "URL pattern"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified content type was not found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "The requested content type 'articles' was not found.",
                  "request_id": "|8aa7f93878023f469d2b587e4fb07f85.ddb7bb71_",
                  "error_code": 101,
                  "specific_code": 0
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/types/coffee' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.type('coffee')\n    .toObservable()\n    .subscribe(response => console.log(response.type));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { DeliveryClient } from '@kentico/kontent-delivery';\n\nconst deliveryClient = new DeliveryClient({\n  projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.type('coffee')\n    .toObservable()\n    .subscribe(response => console.log(response.type));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets a specific content type\nContentType type = await client.GetTypeAsync(\"coffee\");"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nContentType type = client.getType(\"coffee\");"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets a content type using a simple request\nContentType type = deliveryService.type(\"coffee\")\n    .get()\n    .getType();\n\n// Gets a content type using RxJava2\ndeliveryService.type(\"coffee\")\n    .getObservable()\n    .subscribe(new Observer<DeliveryTypeResponse>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryTypeResponse response) {\n            // Gets the type from response\n            ContentType type = response.getType();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "Swift",
          "source": "// Tip: Find more about Swift SDKs at https://docs.kontent.ai/ios\nimport KenticoCloud\n \nlet client = DeliveryClient.init(projectId: \"975bf280-fd91-488c-994c-2f04416e5ee3\")\n \nclient.getContentType(name: \"coffee\", completionHandler: { (isSuccess, contentType, error) in\n    if !isSuccess {\n        fail( \"Response is not successful. Error: \\(String(describing: error))\" )\n    }\n     \n    if let type = contentType {\n    // use content type here\n    }\n})"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$type = $client->getType('coffee');"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.type('coffee').execute do |response|\n  type = response.type\nend"
        }]
      }
    },
    "/{project_id}/taxonomies": {
      "get": {
        "description": "Retrieve a paginated list of taxonomy groups in your project. By default, the API returns all taxonomy groups ordered alphabetically by codename. You can customize pagination by using the `skip` and `limit` query parameters.\n",
        "operationId": "list-taxonomy-groups",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/skip"
        }, {
          "$ref": "#/components/parameters/limit_8cd54e2"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "List taxonomy groups",
        "tags": ["Taxonomy groups"],
        "responses": {
          "200": {
            "description": "A paginated list of taxonomy groups.\n",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["taxonomies", "pagination"],
                  "properties": {
                    "taxonomies": {
                      "description": "A list of taxonomy groups.\n",
                      "items": {
                        "$ref": "#/components/schemas/TaxonomyGroup"
                      },
                      "uniqueItems": true,
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "taxonomies": [{
                    "system": {
                      "id": "4ce421e9-c403-eee8-fdc2-74f09392a749",
                      "name": "Manufacturer",
                      "codename": "manufacturer",
                      "last_modified": "2017-09-07T08:15:22.7210000Z"
                    },
                    "terms": [{
                      "name": "Aerobie",
                      "codename": "aerobie",
                      "terms": []
                    }, {
                      "name": "Chemex",
                      "codename": "chemex",
                      "terms": []
                    }, {
                      "name": "Espro",
                      "codename": "espro",
                      "terms": []
                    }, {
                      "name": "Hario",
                      "codename": "hario",
                      "terms": []
                    }]
                  }, {
                    "system": {
                      "id": "f30c7f72-e9ab-8832-2a57-62944a038809",
                      "name": "Personas",
                      "codename": "personas",
                      "last_modified": "2016-10-20T13:24:00.3200000Z"
                    },
                    "terms": [{
                      "name": "Coffee expert",
                      "codename": "coffee_expert",
                      "terms": [{
                        "name": "Barista",
                        "codename": "barista",
                        "terms": []
                      }, {
                        "name": "Cafe owner",
                        "codename": "cafe_owner",
                        "terms": []
                      }]
                    }, {
                      "name": "Coffee enthusiast",
                      "codename": "coffee_enthusiast",
                      "terms": [{
                        "name": "Coffee lover",
                        "codename": "coffee_lover",
                        "terms": []
                      }, {
                        "name": "Coffee blogger",
                        "codename": "coffee_blogger",
                        "terms": []
                      }]
                    }]
                  }, {
                    "system": {
                      "id": "d351400e-0290-87b2-1413-6c411d8ae5a4",
                      "name": "Processing",
                      "codename": "processing",
                      "last_modified": "2017-09-07T08:15:33.7560000Z"
                    },
                    "terms": [{
                      "name": "Wet (Washed)",
                      "codename": "wet__washed_",
                      "terms": []
                    }, {
                      "name": "Dry (Natural)",
                      "codename": "dry__natural_",
                      "terms": []
                    }, {
                      "name": "Semi-dry",
                      "codename": "semi_dry",
                      "terms": []
                    }]
                  }],
                  "pagination": {
                    "skip": 0,
                    "limit": 3,
                    "count": 3,
                    "next_page": "https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/taxonomies?limit=3&skip=3"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/taxonomies?limit=3' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.taxonomies()\n    .limitParameter(3)\n    .toObservable()\n    .subscribe(response => console.log(response.taxonomies));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { DeliveryClient } from '@kentico/kontent-delivery';\n\nconst deliveryClient = new DeliveryClient({\n  projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.taxonomies()\n    .limitParameter(3)\n    .toObservable()\n    .subscribe(response => console.log(response.taxonomies));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets 3 taxonomy groups\nDeliveryTypeListingResponse response = await client.GetTaxonomiesAsync(\n    new LimitParameter(3)\n    );\n\nvar taxonomyGroups = response.Taxonomy;"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nList<NameValuePair> params = DeliveryParameterBuilder.params().page(null, 3).build();\n\nTaxonomyGroupListingResponse response = client.getTaxonomyGroups(params);"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets 3 taxonomy groups using a simple request\nList<Taxonomy> taxonomies = deliveryService.taxonomies()\n    .limitParameter(3)\n    .get()\n    .getTaxonomies();\n\n// Gets 3 taxonomy groups using RxJava2\ndeliveryService.taxonomies()\n    .limitParameter(3)\n    .getObservable()\n    .subscribe(new Observer<DeliveryTaxonomyListingResponse>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryTaxonomyListingResponse response) {\n            // Gets the taxonomy groups\n            List<Taxonomy> taxonomies = response.getTaxonomies();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "Swift",
          "source": "// Tip: Find more about Swift SDKs at https://docs.kontent.ai/ios\nimport KenticoCloud\n\nlet client = DeliveryClient.init(projectId: \"975bf280-fd91-488c-994c-2f04416e5ee3\")\n\nclient.getTaxonomies(completionHandler: { (isSuccess, deliveryItems, error) in\n   if isSuccess {\n       if let taxonomies = deliveryItems?.items {\n        // use your taxonomies here\n       }\n    } else {\n         if let error = error {\n             print(error)\n         }\n    }\n})"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\nuse Kentico\\Kontent\\Delivery\\QueryParams;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$taxonomyGroups = $client->getTaxonomies((new QueryParams())\n            ->limit(3));"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.taxonomies\n               .limit(3)\n               .execute do |response|\n                 groups = response.taxonomies\n               end"
        }]
      }
    },
    "/{project_id}/taxonomies/{taxonomy_group_codename}": {
      "get": {
        "description": "Retrieve a specific taxonomy group specified by codename.\n",
        "operationId": "retrieve-a-taxonomy-group",
        "parameters": [{
          "$ref": "#/components/parameters/project_id"
        }, {
          "$ref": "#/components/parameters/taxonomy_group_codename"
        }, {
          "$ref": "#/components/parameters/x_kc_wait_for_loading_new_content"
        }],
        "summary": "Retrieve a taxonomy group",
        "tags": ["Taxonomy groups"],
        "responses": {
          "200": {
            "description": "A taxonomy group object.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxonomyGroup"
                },
                "example": {
                  "system": {
                    "id": "f30c7f72-e9ab-8832-2a57-62944a038809",
                    "name": "Personas",
                    "codename": "personas",
                    "last_modified": "2016-10-20T13:24:00.3200000Z"
                  },
                  "terms": [{
                    "name": "Coffee expert",
                    "codename": "coffee_expert",
                    "terms": [{
                      "name": "Barista",
                      "codename": "barista",
                      "terms": []
                    }, {
                      "name": "Cafe owner",
                      "codename": "cafe_owner",
                      "terms": []
                    }]
                  }, {
                    "name": "Coffee enthusiast",
                    "codename": "coffee_enthusiast",
                    "terms": [{
                      "name": "Coffee lover",
                      "codename": "coffee_lover",
                      "terms": []
                    }, {
                      "name": "Coffee blogger",
                      "codename": "coffee_blogger",
                      "terms": []
                    }]
                  }]
                }
              }
            }
          },
          "404": {
            "description": "The specified taxonomy group was not found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "The requested taxonomy group 'persona' was not found.",
                  "request_id": "|a0d6c1ee9d2bc943bdd92e57e9dc97c4.4f33764a_",
                  "error_code": 104,
                  "specific_code": 0
                }
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "cURL",
          "source": "curl --request GET \\\n  --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/taxonomies/personas' \\\n  --header 'content-type: application/json'"
        }, {
          "lang": "JavaScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nconst KontentDelivery = require('@kentico/kontent-delivery');\n\nconst deliveryClient = new KontentDelivery.DeliveryClient({\n    projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.taxonomy('personas')\n    .toObservable()\n    .subscribe(response => console.log(response.taxonomy));"
        }, {
          "lang": "TypeScript",
          "source": "// Tip: Find more about JS/TS SDKs at https://docs.kontent.ai/javascript\nimport { DeliveryClient } from '@kentico/kontent-delivery';\n\nconst deliveryClient = new DeliveryClient({\n  projectId: '975bf280-fd91-488c-994c-2f04416e5ee3'\n});\n\ndeliveryClient.taxonomy('personas')\n    .toObservable()\n    .subscribe(response => console.log(response.taxonomy));"
        }, {
          "lang": "C#",
          "source": "// Tip: Find more about .NET SDKs at https://docs.kontent.ai/net\nusing Kentico.Kontent.Delivery;\n\n// Initializes a content delivery client\nIDeliveryClient client = DeliveryClientBuilder\n      .WithProjectId(\"975bf280-fd91-488c-994c-2f04416e5ee3\")\n      .Build();\n\n// Gets a specific taxonomy group\nTaxonomyGroup taxonomyGroup = await client.GetTaxonomyAsync(\"personas\");"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery;\n\nDeliveryClient client = new DeliveryClient(\"975bf280-fd91-488c-994c-2f04416e5ee3\");\n\nTaxonomyGroup taxonomyGroup = client.getTaxonomyGroup(\"personas\");"
        }, {
          "lang": "Java",
          "source": "// Tip: Find more about Java/JavaRx SDKs at https://docs.kontent.ai/javaandroid\nimport com.kenticocloud.delivery_core.*;\nimport com.kenticocloud.delivery_rx.*;\n\nimport io.reactivex.Observer;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.functions.Function;\n\n// Prepares the DeliveryService configuration object\nString projectId = \"975bf280-fd91-488c-994c-2f04416e5ee3\";\nIDeliveryConfig config = DeliveryConfig.newConfig(projectId);\n\n// Initializes a DeliveryService for Java projects\nIDeliveryService deliveryService = new DeliveryService(config);\n\n// Gets a taxonomy group using a simple request\nTaxonomy taxonomy = deliveryService.taxonomy(\"personas\")\n    .get()\n    .getTaxonomy();\n\n// Gets a taxonomy group using RxJava2\ndeliveryService.taxonomy(\"personas\")\n    .getObservable()\n    .subscribe(new Observer<DeliveryTaxonomyResponse>() {\n        @Override\n        public void onSubscribe(Disposable d) {\n        }\n\n        @Override\n        public void onNext(DeliveryTaxonomyResponse response) {\n            // Gets the taxonomy group\n            Taxonomy taxonomy = response.getTaxonomy();\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            System.out.println(e.getMessage());\n        }\n\n        @Override\n        public void onComplete() {\n        }\n    });"
        }, {
          "lang": "Swift",
          "source": "// Tip: Find more about Swift SDKs at https://docs.kontent.ai/ios\nimport KenticoCloud\n\nlet client = DeliveryClient.init(projectId: \"975bf280-fd91-488c-994c-2f04416e5ee3\")\n\nclient.getTaxonomyGroup(taxonomyGroupName: \"personas\", completionHandler: { (isSuccess, deliveryItem, error) in\n   if isSuccess {\n       if let taxonomyGroup = deliveryItems.item {\n        // use your taxonomy group here\n       }\n    } else {\n         if let error = error {\n             print(error)\n         }\n    }\n})"
        }, {
          "lang": "PHP",
          "source": "<?php\n// Tip: Find more about PHP SDKs at https://docs.kontent.ai/php\n\n// Defined by Composer to include required libraries\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Kentico\\Kontent\\Delivery\\DeliveryClient;\n\n$client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');\n\n$taxonomyGroup = $client->getTaxonomy('personas');"
        }, {
          "lang": "Ruby",
          "source": "require 'delivery-sdk-ruby'\n\ndelivery_client = Kentico::Kontent::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'\ndelivery_client.taxonomy('personas').execute do |response|\n  group = response.taxonomy\nend"
        }]
      }
    }
  },
  "servers": [{
    "description": "Delivery API",
    "url": "https://deliver.kontent.ai"
  }, {
    "description": "Delivery Preview API",
    "url": "https:///preview-deliver.kontent.ai"
  }],
  "tags": [{
    "description": "The Delivery API does not require authentication by default but you can enable secure access for the project to force authenticated requests.\n\n<!--Callout type=Info-->\n\n<p><strong>Premium feature</strong></p>\n<p>Secure access to the Delivery API requires a <a data-item-id=\"f10f0d66-605d-4fb5-8ff4-67d808c59d4a\" href=\"https://docs.kontent.ai/link-to/what_each_subscription_plan_includes\">Professional plan or higher</a>.</p>\n\n<!--Callout-end-->\n\nWith secure access, you can use two concurrent API keys, Primary and Secondary. For more details on how to work with the keys, see [Securing public access](https://docs.kontent.ai/link-to/securing_public_access).\n\nAs the Delivery API is designed for continuous retrieval of published content, there is **no expiration date** for the Primary or Secondary API key.\n\nThe API keys are **scoped per project**. This means you need a separate API key for each project in Kentico Cloud. All users within a single project share the same Delivery API keys.\n",
    "name": "Secure access"
  }, {
    "description": "The Delivery API with [secure access](https://docs.kontent.ai/link-to/secure_access) enabled and the Delivery Preview API both use two concurrent API keys, Primary and Secondary. In certain situations, you may need to revoke one of these keys and generate a new one. For example, when you suspect unauthorized key use or when a developer with access to the API key has left your company.\n\nFor situations like these, one or both of the API keys can be regenerated. Activating a new key will immediately replace the old key. Requests made with a revoked API key will then receive a `401 Unauthorized` HTTP status in the response.\n\n<!--Callout type=Tip-->\n\n<p><strong>Expiration date and key regeneration</strong></p>\n<p>There is no expiration date for the Primary or Secondary API key. However, we recommend that you regenerate the API keys periodically to prevent the keys from being compromised.</p>\n<p>Learn more in <a data-item-id=\"961f2179-e62c-4927-a7ad-e270d55fb61f\" href=\"https://docs.kontent.ai/link-to/securing_public_access\">Securing public access</a> and <a data-item-id=\"c62f9339-3ba4-4a02-98a3-f4920cb591be\" href=\"https://docs.kontent.ai/link-to/previewing_unpublished_content\">Previewing unpublished content</a>.</p>\n\n<!--Callout-end-->\n",
    "name": "Revoking API keys"
  }, {
    "description": "When [retrieving content items](https://docs.kontent.ai/link-to/list_content_items) from your project, you can filter large sets of content items by building query parameters from content elements and system properties. Note that filtering does NOT apply to content items returned within the `modular_content` collection.\n\nIf you want to get only a specific set of elements from content items, use [projection](https://docs.kontent.ai/link-to/projection) when retrieving the items.\n\n### Filtering by `system` values\n\nTo filter by system property values, you need to use a query parameter in the `system.<property_name>` format. The `system` properties are `id`, `name`, `codename`, `language`, `type`, `sitemap_locations`, and `last_modified`. For example, to retrieve only content items based on the *Article* content type, use `system.type=article` as a query parameter.\n\n### Filtering by `element` values\n\nTo filter by [content element](https://docs.kontent.ai/link-to/content_elements) values, you need to use a query parameter in the `elements.<element_codename>=<value>` format. For example, to retrieve only content items whose *Number* element named **Price** has a value of 16, use `elements.price=16` as a query parameter.\n\n### Joining multiple query parameters\n\nYou can join multiple query parameters using the `&` character. Queries with two or more filtering query parameters are more restrictive because the individual query parameters are merged with a logical conjunction (AND).\n\nFor example, the query `system.type=article&elements.persona[contains]=barista` will return the content items of the Article type that are tagged with the *Barista* taxonomy term.\n\n### Filtering operators\n\nYou can use the following filtering operators with both system properties and element values.\n\nNote that all of the operators are **case-sensitive**.\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>Operator</td>\n\n<td>Description</td>\n\n<td>Example</td>\n\n<td>Use with</td>\n\n</tr>\n\n<tr>\n\n<td>=</td>\n\n<td>\n\nProperty value is the same as the specified value.\\\nMore in Comparing values.\n\n</td>\n\n<td><code>system.type=article</code></td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[lt]</td>\n\n<td>\n\nProperty value is less than the specified value.\\\nMore in Comparing values.\n\n</td>\n\n<td>\n\n<code>system.last_modified[lt]=2019-03-01</code>\\\n<code>elements.price[lt]=10</code>\n\n</td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[lte]</td>\n\n<td>\n\nProperty value is less than or equal to the specified value.\\\nMore in Comparing values.\n\n</td>\n\n<td>\n\n<code>system.last_modified[lt]=2019-02-01</code>\\\n<code>elements.price[lte]=4</code>\n\n</td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[gt]</td>\n\n<td>\n\nProperty value is greater than the specified value.\\\nMore in Comparing values.\n\n</td>\n\n<td>\n\n<code>system.last_modified[gt]=2019-01-01</code>\\\n<code>elements.price[gt]=10</code>\n\n</td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[gte]</td>\n\n<td>\n\nProperty value is greater than or equal to the specified value.\\\nMore in Comparing values.\n\n</td>\n\n<td>\n\n<code>system.last_modified[gt]=2019-02-28</code>\\\n<code>elements.price[gt]=10</code>\n\n</td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[range]</td>\n\n<td>\n\nProperty value falls within the specified range of two values, both inclusive.\\\nMore in Comparing values.\n\n</td>\n\n<td>\n\n<code>system.last_modified[range]=2018-02-01,2018-03-31</code>\\\n<code>elements.price[range]=10.5,50</code>\n\n</td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[in]</td>\n\n<td>Property value is in the specified list of values.</td>\n\n<td>\n\n<code>system.type[in]=cafe,coffee</code>\\\n<code>elements.price[in]=8.5,9,10.5</code>\n\n</td>\n\n<td>Simple types</td>\n\n</tr>\n\n<tr>\n\n<td>[contains]</td>\n\n<td>\n\nProperty with an array of values contains the specified value.\\\n**Note**: The <code>[contains]</code> operator cannot be used on strings.\n\n</td>\n\n<td><code>elements.personas[contains]=barista</code></td>\n\n<td>Arrays</td>\n\n</tr>\n\n<tr>\n\n<td>[any]</td>\n\n<td>Property with an array of values contains at least one value from the specified list of values.</td>\n\n<td><code>elements.personas[any]=barista,coffee_blogger</code></td>\n\n<td>Arrays</td>\n\n</tr>\n\n<tr>\n\n<td>[all]</td>\n\n<td>Property with an array of values contains all of the specified values.</td>\n\n<td><code>elements.personas[all]=barista,coffee_blogger</code></td>\n\n<td>Arrays</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\n### Arrays vs. simple types\n\nYou can use the `[contains]`, `[any]`, and `[all]` filtering operators only on array properties. The supported array properties include the sitemap locations within the `system` object of content items, and the linked items, multiple choice, and taxonomy elements.\n\n**Note**: Asset elements are not supported with `[contains]`, `[any]`, and `[all]`Â filtering operators.\n\n### Comparing values\n\nThe `[lt]`, `[lte]`, `[gt]`, `[gte]`, and `[range]` filtering operators work best with numbers. For example, you can retrieve products with `price` larger or equal to 15 by using `elements.price[gte]=15`.\n\n<!--Callout type=Info-->\n\n<p><strong>Filtering by date-time values</strong></p>\n<p>Properties that store dates (such as the <code>last_modified</code> system property or date &amp; time <a data-item-id=\"ea9768d1-bd2f-4027-bb5e-5cd9c85ea360\" href=\"https://docs.kontent.ai/link-to/content_elements\">elements</a>) are represented as strings. If you use filtering operators on properties with string values, the Delivery API tries to perform a string comparison.</p>\n<p>For example, you can retrieve content items modified during February and March by using a query such as <code>system.last_modified[range]=2018-02-01,2018-04-01</code>, specifying a start date within the range and an end date outside the range.</p>\n\n<!--Callout-end-->\n",
    "name": "Filtering content"
  }, {
    "description": "When [getting content items](https://docs.kontent.ai/link-to/list_content_items) or [content types](https://docs.kontent.ai/link-to/list_content_types), you can specify which elements to return by using the `elements` query parameter.\n* For items, the parameter applies to content items returned within bothÂ the `items` array and `modular_content` collection.\n* For types, the parameter applies to content types returned within the `types` array.\n\n### Examples\n\nBy using `elements=title` as a query parameter, the `elements` collection in each content item will contain only the element with the codename `title`, or, if the item doesn't have an element with such codename, the `elements` collection will be empty.\n\nFor multiple elements, you can use a query parameter such as `elements=title,summary,related_articles` to retrieve only the elements with codenames `title`, `summary`, and `related_articles`.\n\n**Note**: Projection does not apply to the system properties. This means that you cannot omit the `system` object from the response using any query.\n",
    "name": "Projection"
  }, {
    "description": "Kentico Cloud offers a variety of ways to compose, structure, and cross-reference your content:\n* **Linked items elements** are used to reference other content items.\n* **Rich text elements** can also contain content items. Useful for inserting content into a specific point in the text.\n* Rich text elements can contain **components**.\n  * A component is a single-use content item.\n  * It has the same structure as a [content item](https://docs.kontent.ai/link-to/content_items).\n  * It is based on a specific content type.\n  * Unlike a content item, a component only exists inside its Rich text element. Learn more about [using components](https://docs.kontent.ai/link-to/structuring_editorial_articles_with_components).\n\nWhen [retrieving items](https://docs.kontent.ai/link-to/list_content_items) using the Delivery API, the contents of *all components and content items in rich text and linked items elements* are stored as properties in a separate `modular_content` object within the API response. The properties of the `modular_content` object (i.e., individual components and items) are not ordered. See the linked items and rich text [elements](https://docs.kontent.ai/link-to/content_elements) for how ordering is done there.\n\nNote that the object is called *\"modular_content\"* instead of *\"linked_content\"* for historical reasons.\n\nWhen [enumerating the items](https://docs.kontent.ai/link-to/enumerate_content_items) in your project using the Delivery API, the `modular_content` collection in the response will contain only components, not content items used in Linked items elements.\n\n### Linked content depth\n\n**Content items** reference other content items using the linked items or rich text elements. These linked items can reference other items recursively. By default, only one level of linked items is returned.\n* If you want to include more than one level of linked items in response, set the `depth` query parameter to 2 or more.\n* If you want to exclude all linked items, use the `depth=0` query parameter.\n* When retrieving content, linked items cannot be [filtered](https://docs.kontent.ai/link-to/filtering_content).\n\n**Components** are not affected by the `depth` parameter as they are an integral part of their Rich text element. They are always present in the response. You can only nest components up to depth level 6.\n",
    "name": "Linked content and components"
  }, {
    "description": "Content items represent specific pieces of content based on a specific content type. You can retrieve items from your project by [providing their codename](https://docs.kontent.ai/link-to/retrieve_a_content_item) or by providing a set of [filtering parameters](https://docs.kontent.ai/link-to/filtering_content). By default, the Delivery API returns content items in the [default language](https://docs.kontent.ai/link-to/localization_in_kentico_kontent).\n\n## Content item object\n\n\n<SchemaDefinition schemaRef=\"#/components/schemas/ContentItem\" showReadOnly={true} showWriteOnly={true} /> \n",
    "name": "Content items"
  }, {
    "description": "When getting [content items](https://docs.kontent.ai/link-to/content_items) or [content types](https://docs.kontent.ai/link-to/content_types), you get an `elements` collection as a part of the retrieved item or type.\n\nEach element in the `elements` collection contains the following properties.\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>\n\n**Property**\n\n</td>\n\n<td>\n\n**Description**\n\n</td>\n\n<td>\n\n**Type**\n\n</td>\n\n<td>\n\n**Notes**\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>type</td>\n\n<td>Type of the element</td>\n\n<td>string</td>\n\n<td>Valid values: <code>text</code>, <code>rich_text</code>, <code>number</code>, <code>multiple_choice</code>, <code>date_time</code>, <code>asset</code>, <code>modular_content</code> (Linked items element), <code>taxonomy</code>, <code>url_slug</code>.</td>\n\n</tr>\n\n<tr>\n\n<td>name</td>\n\n<td>Display name of the element</td>\n\n<td>string</td>\n\n<td>\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>value</td>\n\n<td>Value of the element</td>\n\n<td>varies</td>\n\n<td>Data type is based on the <code>type</code> of the element â€“ see examples below for more details.</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\nNote that certain elements, such as rich text or taxonomy, can contain additional properties.\n\nFor an overview of the available elements and their limits, see the [reference of content type elements](https://docs.kontent.ai/link-to/content_type_elements_reference).\n\n## Text element\n\n\nThe value of text elements is a `string`.\n\nHere's how text elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"meta_keywords\": {\n  \"type\": \"text\",\n  \"name\": \"Meta keywords\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how text elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"meta_keywords\": {\n  \"type\": \"text\",\n  \"name\": \"Meta keywords\",\n  \"value\": \"\\\"coffee beginner\\\", beverages\"\n}\n```\n\n<!--CodeSample-end-->\n\n## Rich text element\n\n\nIn addition to formatted text, the rich text element's `value` property can contain objects representing images, components, content items, and links to content items. Information about these objects is stored in separate properties:\n* `images` â€“ stores metadata of assets in the text.\n* `modular_content` â€“ stores metadata of linked items and components in the text.\n* `links` â€“ stores metadata about content items linked in the text.\n\n**Note**: If the element does not contain any text, its value defaults to a single empty paragraph: `<p><br></p>`.\n\nHere's how rich text elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"description\": {\n  \"type\": \"rich_text\",\n  \"name\": \"Description\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how rich text elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"description\": {\n  \"type\": \"rich_text\",\n  \"name\": \"Description\",\n  \"images\": {\n    \"14mio\": {\n      \"image_id\": \"14mio\",\n      \"description\": \"Roasting coffee beans\",\n      \"url\": \"https://assets-us-01.kc-usercontent.com/38af179c-40ba-42e7-a5ca-33b8cdcc0d45/237362b4-5f2b-480e-a1d3-0ad5a6d5f8bd/roaster.jpg\",\n      \"width\": 600,\n      \"height\": 457\n    }\n  },\n  \"links\": {\n    \"f4b3fc05-e988-4dae-9ac1-a94aba566474\": {\n      \"type\": \"article\",\n      \"codename\": \"on_roasts\",\n      \"url_slug\": \"\"\n    }\n  },\n  \"modular_content\": [\n    \"coffee_processing_techniques\", # content item in Rich text\n    \"n249afaaf_1de5_011f_f683_c78fd9ec9d7c\" # component in Rich text\n  ],\n  \"value\": \"<p>We operate our own roasteries, one on every continent we cover, from where we distribute right to the <a href=\\\"https://example.com\\\" data-new-window=\\\"true\\\" title=\\\"Example link to shops\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">shops</a>. This allows you to experience every cup as if you were right at the very farm it originated from. To achieve this, we use a refurbished 1920s Probat coffee roasters.</p>\\n<figure data-image-id=\\\"14mio\\\"><img src=\\\"https://assets-us-01.kc-usercontent.com/38af179c-40ba-42e7-a5ca-33b8cdcc0d45/237362b4-5f2b-480e-a1d3-0ad5a6d5f8bd/roaster.jpg\\\" alt=\\\"Roasting coffee beans\\\" data-image-id=\\\"14mio\\\"></figure><p>We know that roasting is something you must keep on constantly perfecting. <object type=\\\"application/kenticocloud\\\" data-type=\\\"item\\\" data-rel=\\\"component\\\" data-codename=\\\"n249afaaf_1de5_011f_f683_c78fd9ec9d7c\\\"></object> Each coffee requires a different roast to get the aroma and taste just right. Thatâ€™s why our experts fine tune the way we <a data-item-id=\\\"f4b3fc05-e988-4dae-9ac1-a94aba566474\\\" href=\\\"\\\">roast coffees</a> every day. Itâ€™s a constant struggle.</p><object type=\\\"application/kenticocloud\\\" data-type=\\\"item\\\" data-codename=\\\"coffee_processing_techniques\\\"></object>\"\n}\n```\n\n<!--CodeSample-end-->\n\n### Images (single object)\n\nEach object in the images collection represents an image ID, e.g., `14mio`.\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>\n\n**Property**\n\n</td>\n\n<td>\n\n**Description**\n\n</td>\n\n<td>\n\n**Type**\n\n</td>\n\n<td>\n\n**Notes**\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>image_id</td>\n\n<td>ID of the image</td>\n\n<td>string</td>\n\n<td>\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>description</td>\n\n<td>Description of the image</td>\n\n<td>string</td>\n\n<td>Used for the <code>alt</code> attribute of an <code>&lt;img&gt;</code> tag.</td>\n\n</tr>\n\n<tr>\n\n<td>url</td>\n\n<td>Absolute URL for the image</td>\n\n<td>string</td>\n\n<td>\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>width</td>\n\n<td>Width of the image</td>\n\n<td>integer</td>\n\n<td>\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>height</td>\n\n<td>Height of the image</td>\n\n<td>integer</td>\n\n<td>\n\n</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\nIn the rich text element's `value`, images are represented by `figure` and `img` tags:\n\n<!--CodeSample programmingLanguage=HTML platform=-->\n\n\n```html\n<figure data-image-id=\\\"14mio\\\"><img src=\\\"https://assets-us-01.kc-usercontent.com/38af179c-40ba-42e7-a5ca-33b8cdcc0d45/237362b4-5f2b-480e-a1d3-0ad5a6d5f8bd/roaster.jpg\\\" alt=\\\"Roasting coffee beans\\\" data-image-id=\\\"14mio\\\"></figure>\n```\n\n<!--CodeSample-end-->\n\n### Modular content (components and items in rich text)\n\nThe `modular_content` collection represents [components and content items](https://docs.kontent.ai/link-to/linked_content_and_components) inserted into rich text. The content items and components are represented as an array of strings. Each string is the codename of a content item or component.\n\nThe codenames are grouped with all content items first and then all components, with the order within each group matching that in the UI. The content of these items and components can be found in the `modular_content` property of the API response when [retrieving content items](https://docs.kontent.ai/link-to/list_content_items). Within the item's `modular_content` property, the items and components are not in any particular order.\n\nIn the rich text element's `value`, content items and components are represented by the `object` tags.\n\n<!--CodeSample programmingLanguage=HTML platform=-->\n\n\n```html\n<!--content item-->\n<object type=\"application/kenticocloud\\\" data-type=\"item\" data-rel=\"link\" data-codename=\"coffee_processing_techniques\"></object>\"\n\n<!--component-->\n<object type=\"application/kenticocloud\\\" data-type=\"item\" data-rel=\"component\" data-codename=\"n249afaaf_1de5_011f_f683_c78fd9ec9d7c\"></object>\n```\n\n<!--CodeSample-end-->\n\n**Note**: Both components and items have the `data-type=\"item\"` attribute so they can be resolved using a single method. You can differentiate between components and items in rich text using the `data-rel` attribute.\n\n### Links (single object)\n\nEach object in the `links` collection represents a content item ID in the GUID format, e.g., `f4b3fc05-e988-4dae-9ac1-a94aba566474`.\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>\n\n**Property**\n\n</td>\n\n<td>\n\n**Description**\n\n</td>\n\n<td>\n\n**Type**\n\n</td>\n\n<td>\n\n**Notes**\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>type</td>\n\n<td>Content type of the content item</td>\n\n<td>string</td>\n\n<td>\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>codename</td>\n\n<td>Display name of the element</td>\n\n<td>string</td>\n\n<td>\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>url_slug</td>\n\n<td>URL slug of the content item</td>\n\n<td>string</td>\n\n<td>Empty string if the content item's type does not use a URL slug element.</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\nIn the rich text element's `value`, links are represented by the `a` tags.\n\n<!--CodeSample programmingLanguage=HTML platform=-->\n\n\n```html\n<a data-item-id=\\\"f4b3fc05-e988-4dae-9ac1-a94aba566474\\\" href=\\\"\\\">roast coffees</a>\n```\n\n<!--CodeSample-end-->\n\n## Multiple choice element\n\n\nThe `value` of multiple choice elements is an array of selected options. Each option has the `name` and `codename` properties. The order of the option objects in the array matches the order of the options in the UI.\n\nHere's how multiple choice elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"processing\": {\n  \"type\": \"multiple_choice\",\n  \"name\": \"Processing\",\n  \"options\": [\n    {\n      \"name\": \"Dry (Natural)\",\n      \"codename\": \"dry__natural_\"\n    },\n    {\n      \"name\": \"Wet (Washed)\",\n      \"codename\": \"wet__washed_\"\n    },\n    {\n      \"name\": \"Semi-dry\",\n      \"codename\": \"semi_dry\"\n    }\n  ]\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how multiple choice elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"processing\": {\n  \"type\": \"multiple_choice\",\n  \"name\": \"Processing\",\n  \"value\": [\n    {\n      \"name\": \"Dry (Natural)\",\n      \"codename\": \"dry__natural_\"\n    }\n  ]\n}\n```\n\n<!--CodeSample-end-->\n\n## Number element\n\n\nThe `value` of number elements is a decimal number. If empty, the element's `value` is `null`.\n\nHere's how number elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"price\": {\n  \"type\": \"number\",\n  \"name\": \"Price\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how number elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"price\": {\n  \"type\": \"number\",\n  \"name\": \"Price\",\n  \"value\": 8.5\n}\n```\n\n<!--CodeSample-end-->\n\n## Date and time element\n\n\nThe `value` of date & time elements is an [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601 \"International standard covering the exchange of date- and time-related data\") formatted string. If empty, the `value` is `null`.\n\nHere's how number elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"post_date\": {\n  \"type\": \"date_time\",\n  \"name\": \"Post date\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how number elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"post_date\": {\n  \"type\": \"date_time\",\n  \"name\": \"Post date\",\n  \"value\": \"2014-11-18T00:00:00Z\"\n}\n```\n\n<!--CodeSample-end-->\n\n## Asset element\n\n\nThe `value` of asset elements is an array of asset objects. The asset objects are returned in the same order as shown in the UI.\n\n#### Asset object\n\n<table>\n\n<tbody>\n\n<tr>\n\n<td>\n\n**Property**\n\n</td>\n\n<td>\n\n**Description**\n\n</td>\n\n<td>\n\n**Type**\n\n</td>\n\n</tr>\n\n<tr>\n\n<td>name</td>\n\n<td>File name of the asset</td>\n\n<td>string</td>\n\n</tr>\n\n<tr>\n\n<td>type</td>\n\n<td>MIME type of the asset</td>\n\n<td>string</td>\n\n</tr>\n\n<tr>\n\n<td>size</td>\n\n<td>Size of the asset in bytes</td>\n\n<td>integer</td>\n\n</tr>\n\n<tr>\n\n<td>description</td>\n\n<td>Description of the asset</td>\n\n<td>string</td>\n\n</tr>\n\n<tr>\n\n<td>url</td>\n\n<td>Absolute URL for the asset</td>\n\n<td>string</td>\n\n</tr>\n\n<tr>\n\n<td>width</td>\n\n<td>Width of the image in pixels</td>\n\n<td>integer</td>\n\n</tr>\n\n<tr>\n\n<td>height</td>\n\n<td>Height of the image in pixels</td>\n\n<td>integer</td>\n\n</tr>\n\n</tbody>\n\n</table>\n\nHere's how asset elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"teaser_image\": {\n  \"type\": \"asset\",\n  \"name\": \"Teaser image\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how asset elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"teaser_image\": {\n  \"type\": \"asset\",\n  \"name\": \"Teaser image\",\n  \"value\": [\n    {\n      \"name\": \"coffee-beverages-explained-1080px.jpg\",\n      \"type\": \"image/jpeg\",\n      \"size\": \"90895\",\n      \"description\": null,\n      \"url\": \"https://assets-us-01.kc-usercontent.com/38af179c-40ba-42e7-a5ca-33b8cdcc0d45/e700596b-03b0-4cee-ac5c-9212762c027a/coffee-beverages-explained-1080px.jpg\",\n      \"width\": 1000,\n      \"height\": 666\n    }\n  ]\n}\n```\n\n<!--CodeSample-end-->\n\n## Linked items element\n\n\nThe `value` of linked items elements is an array of strings. Each string represents a codename of a content item. The order of the codenames in the array matches the order of the content items in the UI. The content of these items and components can be found in the `modular_content` property of the API response when [retrieving content items](https://docs.kontent.ai/link-to/list_content_items). Within the item's `modular_content` property, the items and components are not in any particular order.\n\nHere's how linked items elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"facts\": {\n  \"type\": \"modular_content\",\n  \"name\": \"Facts\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how linked items elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"facts\": {\n  \"type\": \"modular_content\",\n  \"name\": \"Facts\",\n  \"value\": [\n    \"our_philosophy\",\n    \"how_we_source_our_coffees\",\n    \"how_we_roast_our_coffees\"\n  ]\n}\n```\n\n<!--CodeSample-end-->\n\n## Custom element\n\n\nThe `value` of custom elements is a string. If empty, the `value` is `null`.\n\nHere's how custom elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"color_picker\": {\n  \"type\": \"custom\",\n  \"name\": \"Color picker\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how custom elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"color_picker\": {\n  \"type\": \"custom\",\n  \"name\": \"Color picker\"\n}\n```\n\n<!--CodeSample-end-->\n\n## Taxonomy element\n\n\nThe `value` of taxonomy elements is an array of selected taxonomy terms.\n\nHere's how taxonomy elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"personas\": {\n  \"type\": \"taxonomy\",\n  \"name\": \"Personas\",\n  \"taxonomy_group\": \"personas\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how taxonomy elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"personas\": {\n  \"type\": \"taxonomy\",\n  \"name\": \"Personas\",\n  \"taxonomy_group\": \"personas\",\n  \"value\": [\n    {\n      \"name\": \"Coffee lover\",\n      \"codename\": \"coffee_lover\"\n    }\n  ]\n}\n```\n\n<!--CodeSample-end-->\n\n## URL slug element\n\n\nThe `value` of URL slug elements is a string.\n\nHere's how URL slug elements look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"url_slug\": {\n  \"type\": \"url_slug\",\n  \"name\": \"URL slug\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how URL slug elements look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"url_slug\": {\n  \"type\": \"url_slug\",\n  \"name\": \"URL slug\",\n  \"value\": \"brazil-natural-barra-grande\"\n}\n```\n\n<!--CodeSample-end-->\n\n## Content type snippet element\n\n\nThe content type snippet elements have no value of their own. In Delivery API, content type snippets are expanded into the elements they contain. You can recognize the elements expanded from snippets by element codenames.\n\nFor example, a content type snippet with two elements will be structured as the 2 elements directly, without any encapsulation. The codenames of these two elements will be in the following format: `<content_type_snippet_codename>__<content_element_codename>`.\n\nHere's how elements from snippets look in content types.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"seo_metatata__meta_keywords\": {\n  \"type\": \"text\",\n  \"name\": \"Meta keywords\"\n},\n\"seo_metatata__meta_description\": {\n  \"type\": \"text\",\n  \"name\": \"Meta description\"\n}\n```\n\n<!--CodeSample-end-->\n\nHere's how elements from snippets look in content items.\n\n<!--CodeSample programmingLanguage=JSON platform=-->\n\n\n```json\n\"seo_metatata__meta_keywords\": {\n  \"type\": \"text\",\n  \"name\": \"Meta keywords\",\n  \"value\": \"donation, africa\"\n},\n\"seo_metatata__meta_description\": {\n  \"type\": \"text\",\n  \"name\": \"Meta description\",\n  \"value\": \"Dancing Goat regularly donates money to Children in Africa, a foundation helping children with food, accommodation, education, and other essentials.\"\n}\n```\n\n<!--CodeSample-end-->\n",
    "name": "Content elements"
  }, {
    "description": "Content types define the structure of [content items](https://docs.kontent.ai/link-to/content_items). Each content type consists of specific [content elements](https://docs.kontent.ai/link-to/content_elements) that define what kind of content (i.e., which data types) the structure holds.\n\n## Content type object\n\n\nTODO\n",
    "name": "Content types"
  }, {
    "description": "Taxonomy groups are a tool you can use to tag content items with specific metadata.\n\nLearn more in [organizing content with taxonomies](https://docs.kontent.ai/link-to/organizing_your_content_with_taxonomies).\n\n## Taxonomy group object\n\n\nTODO\n",
    "name": "Taxonomy groups"
  }],
  "components": {
    "parameters": {
      "project_id": {
        "description": "Identifies your project.\n",
        "in": "path",
        "name": "project_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "975bf280-fd91-488c-994c-2f04416e5ee3"
      },
      "language": {
        "description": "Determines which language variant of content items to return. By default, the API returns content in the default language.\n\n**Note**: If the requested content is not available in the specified language variant, the API follows the [language fallbacks](/tutorials/set-up-projects/set-up-languages/localization-in-kentico-cloud#a-understanding-language-fallbacks \"Understanding language fallbacks\") as configured in the [Localization](https://docs.kontent.ai/link-to/localization_in_kentico_kontent) settings of your project.\n",
        "in": "query",
        "name": "language",
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "en-US"
      },
      "elements": {
        "description": "Determines the elements to retrieve using a comma-separated list of element codenames. The `elements` query parameter applies to all content items within the response.\n\nIf not specified, all elements are retrieved. For more details, see [Projection](https://docs.kontent.ai/link-to/projection).\n",
        "in": "query",
        "name": "elements",
        "explode": false,
        "style": "form",
        "schema": {
          "$ref": "#/components/schemas/StringArray"
        },
        "example": "title,summary,post_date,teaser_image"
      },
      "order": {
        "description": "Determines the order of the retrieved content items. By default, the items are sorted alphabetically by their codenames from A to Z in descending order.\n\nTo sort content items in ascending order, set the parameter value to `<property>[asc]` where <property> is the name of the object property you want to sort by. For example, `order=elements.title[asc]`. Similarly, to sort in descending order, you can use the `[desc]` modifier. You can sort by properties of both the `system` and `elements}~ objects of content items.\n\n**Examples**\n* Sort by date â€“ `order=system.last_modified[desc]`\n* Sort by a content item name â€“ `order=system.name[asc]`\n* Sort by an element value â€“ `order=elements.<element_codename>[asc]`\n",
        "in": "query",
        "name": "order",
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "elements.post_date[desc]"
      },
      "depth": {
        "description": "Determines the level of nesting for content items that the API returns. By default, only the first level of linked items is returned, which is the same as setting `depth=1`.\n\nIf you need to exclude all linked items from the response, set the parameter to `0`. Note that components are always present in response. See [Linked content and components](https://docs.kontent.ai/link-to/linked_content_and_components) for more details.\n",
        "in": "query",
        "name": "depth",
        "schema": {
          "$ref": "#/components/schemas/Integer"
        },
        "example": 1
      },
      "skip": {
        "description": "The number of items to skip when requesting a list of objects. If the `skip` parameter is not specified, the API returns the first page of results.\n\nYou can combine the `limit` and `skip` parameters to specify page size and page number. For example, to set a page size to 10 and get the second page of results, you can use this combination `limit=10&skip=10`.\n",
        "in": "query",
        "name": "skip",
        "schema": {
          "$ref": "#/components/schemas/Integer"
        },
        "example": 10
      },
      "limit_8cd54e2": {
        "description": "The number of items to retrieve in a single request. If the `limit` parameter is not specified, the API returns all items by default.\n\nIf the limit is lower than the total number of items matching your query, the `next_page` property in the `pagination` object of the API response will contain a URL to the next page of results.\n",
        "in": "query",
        "name": "limit",
        "schema": {
          "$ref": "#/components/schemas/Integer"
        },
        "example": 10
      },
      "x_kc_wait_for_loading_new_content": {
        "description": "Determines whether the API waits while fetching content, if the requested content has changed since the last request. This is useful when retrieving changed content in reaction to a [webhook](https://docs.kontent.ai/link-to/using_webhooks_for_automatic_updates) call.\n\nBy default, when the header is not set, the API serves stale content (if cached by the CDN) while it's fetching the new content to minimize wait time. To always fetch new content, set the header value to `true`.\n",
        "in": "header",
        "name": "X-KC-Wait-For-Loading-New-Content",
        "schema": {
          "$ref": "#/components/schemas/Boolean"
        }
      },
      "item_codename": {
        "description": "Identifies the content item by codename.\n",
        "in": "path",
        "name": "item_codename",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "on_roasts"
      },
      "x_continuation": {
        "description": "Determines the next page of results to retrieve. By default, when the header is not set, the API returns the first page of results.\n\nIf there are more items to enumerate, the response will come with the `X-Continuation` header. To get the next page of results, use the `X-Continuation` header from the response in your request.\n",
        "in": "header",
        "name": "X-Continuation",
        "schema": {
          "$ref": "#/components/schemas/String"
        }
      },
      "type_codename": {
        "description": "Identifies the content type by codename.\n",
        "in": "path",
        "name": "type_codename",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "article"
      },
      "element_codename": {
        "description": "Identifies the element by codename within the specified content type.\n\n**Note**: The element's codename has no relation to the type of the element.\n",
        "in": "path",
        "name": "element_codename",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "processing"
      },
      "taxonomy_group_codename": {
        "description": "Identifies the taxonomy group by codename.\n",
        "in": "path",
        "name": "taxonomy_group_codename",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/String"
        },
        "example": "personas"
      }
    },
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "String": {
        "type": "string"
      },
      "StringArray": {
        "items": {
          "$ref": "#/components/schemas/String"
        },
        "type": "array"
      },
      "Integer": {
        "format": "int32",
        "type": "integer"
      },
      "Boolean": {
        "example": false,
        "type": "boolean"
      },
      "AssetInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["asset"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "items": {
              "required": ["name", "type", "size", "description", "url", "width", "height"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "size": {
                  "format": "int32",
                  "type": "integer"
                },
                "url": {
                  "type": "string"
                },
                "width": {
                  "format": "int32",
                  "type": "integer"
                },
                "height": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomElementInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["custom"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateTimeInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["date_time"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "description": "[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string\n",
            "nullable": true,
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedItemsInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["modular_content"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "items": {
              "$ref": "#/components/schemas/String"
            },
            "uniqueItems": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "NumberInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["number"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "nullable": true,
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "image": {
        "description": "Each object in the images collection represents an image id, e.g., `14mio`.\n",
        "required": ["image_id", "description", "url", "width", "height"],
        "properties": {
          "image_id": {
            "type": "string"
          },
          "description": {
            "description": "Used for the alt attribute of an <img> tag.\n",
            "type": "string"
          },
          "url": {
            "description": "Absolute URL for the image\n",
            "type": "string"
          },
          "width": {
            "format": "int32",
            "type": "integer"
          },
          "height": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RichTextLink": {
        "description": "The name of the object represents a content item ID, such as `f4b3fc05-e988-4dae-9ac1-a94aba566474`.\n",
        "required": ["type", "codename", "url_slug"],
        "properties": {
          "type": {
            "description": "Content type of the content item\n",
            "type": "string"
          },
          "codename": {
            "description": "Codename of the content item\n",
            "type": "string"
          },
          "url_slug": {
            "description": "URL slug of the content item. If the item doesn't use a URL slug element, value of `url_slug` is empty string.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RichTextInItem": {
        "required": ["type", "name", "images", "links", "modular_content", "value"],
        "properties": {
          "type": {
            "enum": ["rich_text"],
            "type": "string"
          },
          "name": {
            "example": "Description",
            "type": "string"
          },
          "images": {
            "description": "Each object in the images collection represents an image id, e.g., `14mio`.\n",
            "additionalProperties": {
              "$ref": "#/components/schemas/image"
            },
            "type": "object"
          },
          "links": {
            "description": "Contains metadata for each link to a content item\n",
            "additionalProperties": {
              "$ref": "#/components/schemas/RichTextLink"
            },
            "type": "object"
          },
          "modular_content": {
            "items": {
              "$ref": "#/components/schemas/String"
            },
            "uniqueItems": true,
            "type": "array"
          },
          "value": {
            "description": "If the element does not contain any text, its value defaults to a single empty paragraph: `<p><br></p>`.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxonomyInItem": {
        "required": ["type", "name", "taxonomy_group", "value"],
        "properties": {
          "type": {
            "enum": ["taxonomy"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "taxonomy_group": {
            "type": "string"
          },
          "value": {
            "items": {
              "required": ["name", "codename"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "codename": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Text": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["text"],
            "type": "string"
          },
          "name": {
            "description": "Display name of the element\n",
            "example": "Meta keywords",
            "type": "string"
          },
          "value": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UrlSlugInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["url_slug"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContentItem": {
        "description": "The content item with metadata and individual elements.\n",
        "required": ["system", "elements"],
        "properties": {
          "system": {
            "description": "System properties of the content item.\n",
            "required": ["id", "name", "codename", "language", "type", "sitemap_locations", "last_modified"],
            "properties": {
              "id": {
                "description": "Unique identifier of the content item.\n",
                "example": "f4b3fc05-e988-4dae-9ac1-a94aba566474",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "Display name of the content item.\n",
                "example": "On Roasts",
                "type": "string"
              },
              "codename": {
                "description": "Codename of the content item. By default, generated from the content item's display `name`.\n",
                "example": "on_roasts",
                "type": "string"
              },
              "language": {
                "description": "Codename of the language that the content is in. For details on retrieving content in different languages, see [Getting localized content](https://docs.kontent.ai/link-to/getting_localized_content).\n",
                "example": "en-US",
                "type": "string"
              },
              "type": {
                "description": "Codename of the content type.\n",
                "example": "article",
                "type": "string"
              },
              "sitemap_locations": {
                "description": "A list of sitemap locations that the content item is in.\n\n<!--Callout type=Note-->\n\n<p><strong>Deprecation notice</strong></p>\n<p>Sitemap has been deprecated since April 2019. The <code>sitemap_locations</code> property is a legacy property.</p>\n\n<!--Callout-end-->\n",
                "items": {
                  "$ref": "#/components/schemas/String"
                },
                "type": "array"
              },
              "last_modified": {
                "description": "[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date/time of last change to user-content of a content item.\n\n**Note**: Moving content items through workflow doesn't affect the `last_modified` value.\n",
                "example": "2019-03-27T13:21:11.38Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "elements": {
            "description": "[Content elements](https://docs.kontent.ai/link-to/content_elements) in the content item.\n\n**Note**: The order of the element objects might not match the content element order in the UI.\n",
            "additionalProperties": {
              "oneOf": [{
                "$ref": "#/components/schemas/AssetInItem"
              }, {
                "$ref": "#/components/schemas/CustomElementInItem"
              }, {
                "$ref": "#/components/schemas/DateTimeInItem"
              }, {
                "$ref": "#/components/schemas/LinkedItemsInItem"
              }, {
                "$ref": "#/components/schemas/NumberInItem"
              }, {
                "$ref": "#/components/schemas/RichTextInItem"
              }, {
                "$ref": "#/components/schemas/TaxonomyInItem"
              }, {
                "$ref": "#/components/schemas/Text"
              }, {
                "$ref": "#/components/schemas/UrlSlugInItem"
              }],
              "x-additionalPropertiesName": "<element_codename>"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Pagination": {
        "description": "Information about the current page of results\n",
        "required": ["skip", "limit", "count", "next_page"],
        "properties": {
          "skip": {
            "description": "The number of objects skipped from the response. Reflects the value specified by the `skip` query parameter.\n",
            "example": 10,
            "format": "int32",
            "default": 0,
            "type": "integer"
          },
          "limit": {
            "description": "The number of objects returned in the response. Reflects the value specified by the `limit` query parameter.\n",
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "count": {
            "description": "The number of retrieved objects.\n\n**Note**: If the `limit` and `skip` query parameters are not specified, the `count}~ property reflects the total number of objects in the project.\n",
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "next_page": {
            "description": "A URL to the next page of results.\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "Error response\n",
        "required": ["message", "request_id", "error_code", "specific_code"],
        "properties": {
          "message": {
            "description": "An explanation of why the error occurred.\n",
            "type": "string"
          },
          "request_id": {
            "description": "ID of the performed request.\n",
            "type": "string"
          },
          "error_code": {
            "description": "Code of the returned error.\n",
            "format": "int32",
            "minimum": 100,
            "maximum": 500,
            "type": "integer"
          },
          "specific_code": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MultipleChoiceInItem": {
        "required": ["type", "name", "value"],
        "properties": {
          "type": {
            "enum": ["multiple_choice"],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "items": {
              "required": ["name", "codename"],
              "properties": {
                "name": {
                  "description": "Name of the multiple choice option\n",
                  "example": "option value",
                  "type": "string"
                },
                "codename": {
                  "description": "Codename of the multiple choice option\n",
                  "example": "option_value",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "uniqueItems": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ContentType": {
        "description": "A content type object.\n",
        "required": ["system", "elements"],
        "properties": {
          "system": {
            "description": "System properties of the content type.\n",
            "required": ["id", "name", "codename", "last_modified"],
            "properties": {
              "id": {
                "description": "Unique internal identifier of the content type.\n",
                "example": "b2c14f2c-6467-460b-a70b-bca17972a33a",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "Display name of the content type.\n",
                "example": "About us",
                "type": "string"
              },
              "codename": {
                "description": "Codename of the content type, generated from the content types's `name`.\n",
                "example": "about_us",
                "type": "string"
              },
              "last_modified": {
                "description": "[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601 \"International standard covering the exchange of date- and time-related data\") formatted date-time of the last content type change.\n",
                "example": "2016-10-20T12:03:17.4685693Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "elements": {
            "description": "A list of [elements](https://docs.kontent.ai/link-to/content_elements) that define the content type.\n\n**Note**: The order of the elements in the API response might not match their order in the UI.\n",
            "additionalProperties": {
              "oneOf": [{
                "$ref": "#/components/schemas/AssetInItem"
              }, {
                "$ref": "#/components/schemas/CustomElementInItem"
              }, {
                "$ref": "#/components/schemas/DateTimeInItem"
              }, {
                "$ref": "#/components/schemas/LinkedItemsInItem"
              }, {
                "$ref": "#/components/schemas/MultipleChoiceInItem"
              }, {
                "$ref": "#/components/schemas/NumberInItem"
              }, {
                "$ref": "#/components/schemas/RichTextInItem"
              }, {
                "$ref": "#/components/schemas/TaxonomyInItem"
              }, {
                "$ref": "#/components/schemas/Text"
              }, {
                "$ref": "#/components/schemas/UrlSlugInItem"
              }],
              "x-additionalPropertiesName": "<element_codename>"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "TaxonomyTerm": {
        "required": ["name", "codename", "terms"],
        "properties": {
          "name": {
            "description": "Display name of the taxonomy term\n",
            "example": "Coffee expert",
            "type": "string"
          },
          "codename": {
            "description": "Codename of the taxonomy term\n",
            "example": "coffee_expert",
            "type": "string"
          },
          "terms": {
            "description": "A list of descendant taxonomy terms.\n",
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaxonomyGroup": {
        "required": ["system", "terms"],
        "properties": {
          "system": {
            "description": "System properties of the taxonomy group.\n",
            "required": ["id", "name", "codename", "last_modified"],
            "properties": {
              "id": {
                "description": "Unique internal identifier of the taxonomy group.\n",
                "example": "f30c7f72-e9ab-8832-2a57-62944a038809",
                "format": "uuid",
                "type": "string"
              },
              "name": {
                "description": "Display name of the taxonomy group.\n",
                "example": "Personas",
                "type": "string"
              },
              "codename": {
                "description": "Codename of the taxonomy group.\n",
                "example": "personas",
                "type": "string"
              },
              "last_modified": {
                "description": "[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601 \"International standard covering the exchange of date- and time-related data\") formatted date-time of the last taxonomy group change.\n",
                "example": "2017-08-31T09:41:06.520241Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "terms": {
            "description": "A list of taxonomy terms.\n",
            "items": {
              "$ref": "#/components/schemas/TaxonomyTerm"
            },
            "uniqueItems": true,
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  }
}
